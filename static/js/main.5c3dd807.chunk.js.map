{"version":3,"sources":["utils/wait-for.ts","components/Question/index.tsx","models/Question.ts","components/InfoCard.tsx","components/CardsContainer.tsx","models/Info.ts","data/DataBuilder.ts","data/AppCards.ts","utils/shuffle-array.ts","components/Results.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["waitFor","ms","Promise","resolve","setTimeout","Question","props","question","useState","acceptsAnswer","setAcceptsAnswer","correctAnswerClassName","setCorrectAnswerClassName","onAnswer","answer","a","Card","style","marginTop","CardContent","Grid","container","direction","imageUrl","item","justify","src","alt","source","text","className","spacing","answers","map","xs","key","id","Button","onClick","fullWidth","disableElevation","disabled","color","isCorrect","variant","isQuestion","card","type","InfoCard","info","buttonText","CardsContainer","cards","cardIds","onFinished","currentId","setCurrentId","currentQuestion","useRef","currentQuestionIndex","indexOf","current","push","questionId","answerId","length","nextQuestion","AnswersBuilder","result","nextId","this","tags","makeAnswer","answersBuilder","_makeQuestion","undefined","_makeInfo","shuffledAnswers","arr","clone","i","randomIndex","Math","floor","random","shuffleArray","questionWithImg","ans","correctAnswer","falseAnswer","tagNames","konnyu","ismerem","kep","alapismeret","hogyvolt","getAppData","ids","Object","keys","parseInt","Results","results","tagResults","maxPossiblePoints","values","filter","points","find","Error","flatMap","tag","tagName","maxPossibleValue","value","forEach","calculateResults","Typography","tagResult","App","isFinished","setIsFinished","setAnswers","AppBar","position","Toolbar","IconButton","edge","aria-label","Menu","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5c3dd807.chunk.js","sourcesContent":["export function waitFor(ms: number) {\n    return new Promise(resolve => {\n        setTimeout(resolve, ms);\n    });\n}\n","import React, { useState } from 'react';\nimport Md from 'react-markdown';\nimport { Button, Card, CardContent, Grid } from '@material-ui/core';\n\nimport './styles.css';\n\nimport { waitFor } from '../../utils/wait-for';\nimport { Question as QuestionModel } from '../../models/Question';\nimport { Answer } from '../../models/Answer';\n\nconst BlinkingClassname = 'blink';\n\nexport type QuestionProps = {\n    question: QuestionModel;\n\n    onAnswer?(answer: Answer): void;\n};\n\nexport function Question(props: QuestionProps) {\n    const { question } = props;\n\n    const [acceptsAnswer, setAcceptsAnswer] = useState(true);\n    const [correctAnswerClassName, setCorrectAnswerClassName] = useState('');\n\n    const onAnswer = (answer: Answer) => async () => {\n        setAcceptsAnswer(false);\n\n        setCorrectAnswerClassName(BlinkingClassname);\n        await waitFor(1200);\n        setCorrectAnswerClassName('');\n\n        if (typeof props.onAnswer === 'function') {\n            props.onAnswer(answer);\n        }\n\n        setAcceptsAnswer(true);\n    };\n\n    return (\n        <Card style={{ marginTop: '12px' }}>\n            <CardContent>\n                <Grid container direction=\"column\">\n                    {question.imageUrl &&\n                        <Grid item container justify=\"center\">\n                            <img\n                                src={question.imageUrl}\n                                alt=\"question\"\n                            />\n                        </Grid>\n                    }\n\n                    <Md source={question.text} className=\"MuiTypography-body1\" />\n\n                    <Grid container spacing={4} direction=\"row\">\n                        {question.answers.map(answer => (\n                            <Grid item xs={6} key={answer.id}>\n                                <Button\n                                    onClick={onAnswer(answer)}\n                                    fullWidth disableElevation\n                                    disabled={!acceptsAnswer}\n                                    color=\"primary\"\n                                    className={answer.isCorrect ? correctAnswerClassName : ''}\n                                    variant=\"contained\">\n                                    {answer.text}\n                                </Button>\n                            </Grid>\n                        ))}\n                    </Grid>\n                </Grid>\n\n            </CardContent>\n        </Card>\n    );\n}\n","import { Answer } from './Answer';\nimport { Card } from './Card';\n\nexport type Question = Card & {\n    type: 'Question';\n    answers: Answer[];\n};\n\nexport function isQuestion(card: Card): card is Question {\n    return card.type === 'Question';\n}\n","import React from 'react';\nimport Md from 'react-markdown';\nimport { Button, Card, CardContent, Grid } from '@material-ui/core';\n\nimport { Info } from '../models/Info';\n\nexport type InfoCardProps = {\n    info: Info;\n\n    onAnswer?(): void;\n};\n\nexport function InfoCard(props: InfoCardProps) {\n    const { info } = props;\n\n    const onAnswer = () => {\n        if (typeof props.onAnswer === 'function') {\n            props.onAnswer();\n        }\n    };\n\n    return (\n        <Card style={{ marginTop: '12px' }}>\n            <CardContent>\n                <Grid container direction=\"column\">\n                    {info.imageUrl &&\n                    <Grid item container justify=\"center\">\n                        <img\n                            src={info.imageUrl}\n                            alt=\"info\"\n                        />\n                    </Grid>\n                    }\n\n                    <Md source={info.text} className=\"MuiTypography-body1\" />\n\n                    <Grid container spacing={2} direction=\"row\">\n                        <Button\n                            onClick={onAnswer}\n                            fullWidth disableElevation\n                            color=\"primary\"\n                            variant=\"contained\">\n                            {info.buttonText}\n                        </Button>\n                    </Grid>\n                </Grid>\n\n            </CardContent>\n        </Card>\n    );\n}\n","import React, { useState, useRef } from 'react';\n\nimport { Question } from './Question';\nimport { Card as CardModel } from '../models/Card';\nimport { isInfo } from '../models/Info';\nimport { isQuestion } from '../models/Question';\nimport { Answer } from '../models/Answer';\nimport { AnswerResult } from '../models/AnswerResult';\nimport { InfoCard } from './InfoCard';\n\nexport type CardsContainerProps = {\n    cards: {\n        [id: number]: CardModel\n    },\n    cardIds: number[];\n\n    onFinished(answers: AnswerResult[]): void;\n};\n\nexport function CardsContainer(props: CardsContainerProps) {\n    const {\n        cards,\n        cardIds,\n        onFinished,\n    } = props;\n\n    const [currentId, setCurrentId] = useState(cardIds[0]);\n    const currentQuestion = cards[currentId];\n\n    const answers = useRef<AnswerResult[]>([]);\n\n    const onAnswer = (answer?: Answer) => {\n        const currentQuestionIndex = cardIds.indexOf(currentId);\n\n        if (isQuestion(currentQuestion)) {\n            answers.current.push({\n                questionId: currentId,\n                answerId: answer!.id\n            });\n        }\n\n        const isLastQuestion = currentQuestionIndex === cardIds.length - 1;\n        if (isLastQuestion) {\n            onFinished(answers.current);\n            return;\n        }\n\n        const nextQuestion = cardIds[currentQuestionIndex + 1];\n        setCurrentId(nextQuestion);\n    };\n\n    return (\n        <>\n            {isQuestion(currentQuestion) &&\n                <Question question={currentQuestion} onAnswer={onAnswer} />\n            }\n            {isInfo(currentQuestion) &&\n                <InfoCard info={currentQuestion} onAnswer={onAnswer} />\n            }\n        </>\n    );\n}\n","import { Card } from './Card';\n\nexport type Info = Card & {\n    type: 'Info';\n    buttonText: string;\n};\n\nexport function isInfo(card: Card): card is Info {\n    return card.type === 'Info';\n}\n","import { shuffleArray } from '../utils/shuffle-array';\n\nimport { Card } from '../models/Card';\nimport { Question } from '../models/Question';\nimport { Answer } from '../models/Answer';\nimport { Info } from '../models/Info';\n\nclass AnswersBuilder {\n    public readonly result: Answer[];\n\n    private nextId: number;\n\n    constructor() {\n        this.result = [];\n        this.nextId = 1;\n    }\n\n    falseAnswer(text: string, tags?: string[]): this {\n        const answer = this.makeAnswer(text, false, tags);\n\n        this.result.push(answer);\n\n        return this;\n    }\n\n    correctAnswer(text: string, tags?: string[]): this {\n        const answer = this.makeAnswer(text, true, tags);\n\n        this.result.push(answer);\n\n        return this;\n    }\n\n    private makeAnswer(text: string, isCorrect: boolean, tags?: string[]): Answer {\n        const answer: Answer = {\n            id: this.nextId,\n            text,\n            isCorrect,\n            tags\n        };\n\n        this.nextId += 1;\n\n        return answer;\n    }\n}\n\nclass CardBuilder {\n    public readonly cards: { [id: number]: Card };\n    private nextId: number;\n\n    constructor() {\n        this.cards = {};\n        this.nextId = 1;\n    }\n\n    questionWithImg(text: string, imageUrl: string, answersBuilder: (builder: AnswersBuilder) => AnswersBuilder): this {\n        const question = this._makeQuestion(text, imageUrl, answersBuilder);\n\n        this.cards[question.id] = question;\n\n        return this;\n    }\n\n    question(text: string, answersBuilder: (builder: AnswersBuilder) => AnswersBuilder): this {\n        const question = this._makeQuestion(text, undefined, answersBuilder);\n\n        this.cards[question.id] = question;\n\n        return this;\n    }\n\n    infoWithImg(text: string, imageUrl: string, buttonText: string): this {\n        const info = this._makeInfo(text, imageUrl, buttonText);\n\n        this.cards[info.id] = info;\n\n        return this;\n    }\n\n    info(text: string, buttonText: string): this {\n        const info = this._makeInfo(text, undefined, buttonText);\n\n        this.cards[info.id] = info;\n\n        return this;\n    }\n\n    private _makeQuestion(\n        text: string,\n        imageUrl: string | undefined,\n        answersBuilder: (builder: AnswersBuilder) => AnswersBuilder,\n    ): Question {\n        const answers = answersBuilder(new AnswersBuilder()).result;\n        const shuffledAnswers = shuffleArray(answers);\n\n        const question: Question = {\n            id: this.nextId,\n            type: 'Question',\n            text,\n            answers: shuffledAnswers,\n            imageUrl,\n        };\n\n        this.nextId += 1;\n\n        return question;\n    }\n\n    private _makeInfo(\n        text: string,\n        imageUrl: string | undefined,\n        buttonText: string,\n    ): Info {\n        const info: Info = {\n            id: this.nextId,\n            type: 'Info',\n            text,\n            buttonText,\n            imageUrl,\n        };\n\n        this.nextId += 1;\n\n        return info;\n    }\n}\n\nexport function dataBuilder() {\n    return new CardBuilder();\n}\n","import { Card } from '../models/Card';\nimport { dataBuilder } from './DataBuilder';\n\nexport type AppCards = {\n    [id: number]: Card;\n};\n\nexport type AppData = {\n    cards: AppCards;\n    ids: number[];\n    tagNames: {\n        [tag: string]: string;\n    };\n};\n\nconst cards = dataBuilder()\n    .info(\n        '# Üdv a játékban!\\n\\nMennyire ismered a magyar internetes kultúra tetejét?\\n\\n',\n        'Kezdjük!'\n    )\n    .info(\n        '**Első szint**: alapműveltség',\n        'Folytatás'\n    )\n    .questionWithImg(\n        'Ki található a képen?',\n        '/res/konnyu-1.jpg',\n        ans => ans\n            .correctAnswer('Szalacsi Sándor', ['konnyu', 'kep'])\n            .falseAnswer('Matisz nagypapa')\n            .falseAnswer('Szente Csaba')\n            .falseAnswer('Polgár Jenő')\n    )\n    .questionWithImg(\n        'Ki található a képen?',\n        '/res/konnyu-2.jpg',\n        ans => ans\n            .correctAnswer('Fogarasi Árpád', ['konnyu', 'kep'])\n            .falseAnswer('Meteorológus Mihály')\n            .falseAnswer('Lakatos \"Cshapo\" Csaba')\n            .falseAnswer('Kádár Sándor')\n    )\n    .questionWithImg(\n        'Ki található a képen?',\n        '/res/konnyu-3.jpg',\n        ans => ans\n            .correctAnswer('Lakatos \"Cshapo\" Csaba', ['konnyu', 'kep'])\n            .falseAnswer('Köcsög Pityu')\n            .falseAnswer('Csipkés Zoltán')\n            .falseAnswer('Alfonz, a szipus')\n    )\n    .questionWithImg(\n        'Ki található a képen?',\n        '/res/konnyu-4.jpg',\n        ans => ans\n            .correctAnswer('Matisz nagypapa', ['konnyu', 'kep'])\n            .falseAnswer('Szente Csaba')\n            .falseAnswer('Lakatos Vinetu')\n            .falseAnswer('Meteorológus Mihály')\n    )\n    .questionWithImg(\n        'Ki található a képen?',\n        '/res/konnyu-5.jpg',\n        ans => ans\n            .correctAnswer('Almási Kristóf', ['konnyu', 'kep'])\n            .falseAnswer('Szente Csaba')\n            .falseAnswer('Csupi')\n            .falseAnswer('Regős Bendegúz')\n    )\n    .questionWithImg(\n        'Mi **nem** mondható majálisra?',\n        '/res/konnyu-6.jpg',\n        ans => ans\n            .correctAnswer('A biztonsági szervezet túl sok', ['konnyu', 'alapismeret'])\n            .falseAnswer('A szeretet ünnepe')\n            .falseAnswer('Sok a köcsög')\n            .falseAnswer('Jók a pogramok')\n    )\n    .questionWithImg(\n        'Mit énelekt Attila a Megasztárban?',\n        '/res/konnyu-7.jpg',\n        ans => ans\n            .correctAnswer('Titanic', ['konnyu', 'alapismeret'])\n            .falseAnswer('Bikicsunáj')\n            .falseAnswer('Zámbó Jimmy')\n            .falseAnswer('Pocahontas')\n    )\n    .info(\n        '**Második szint**: Ezeket ismerem',\n        'Folytatás'\n    )\n    .questionWithImg(\n        'Mit illik tudni a betonról Meteorológus Mihály szerint?',\n        '/res/ismerem-1.jpg',\n        ans => ans\n            .correctAnswer('Öntözni kell', ['ismerem'])\n            .falseAnswer('Kurva kemény')\n            .falseAnswer('Tegnap öntöttem')\n            .falseAnswer('Le fogom hugyozni')\n    )\n    .questionWithImg(\n        'Milyen nőt kér Zordon az Oroszlánkirály paródiában?',\n        '/res/ismerem-2.jpg',\n        ans => ans\n            .correctAnswer('Vöröset nagy picsával', ['ismerem'])\n            .falseAnswer('Szőkét nagy csöcsökkel')\n            .falseAnswer('Feketét szőrös lábakkal')\n            .falseAnswer('Barnát csinos seggel')\n    )\n    .questionWithImg(\n        'Hol élt Csipkés Zoltán?',\n        '/res/ismerem-3.jpg',\n        ans => ans\n            .correctAnswer('Ózd', ['ismerem'])\n            .falseAnswer('Kecsennét')\n            .falseAnswer('Gyöngyös')\n            .falseAnswer('Füzesabony')\n    )\n    .questionWithImg(\n        'Mikor történt a baleset?',\n        '/res/ismerem-4.jpg',\n        ans => ans\n            .correctAnswer('Hétfőn 11 órakor', ['ismerem'])\n            .falseAnswer('A napokban')\n            .falseAnswer('Jenő')\n            .falseAnswer('Máma reggel')\n    )\n    .questionWithImg(\n        'Mije van a riporternek Vírus szerint?',\n        '/res/ismerem-5.jpg',\n        ans => ans\n            .correctAnswer('Szép nagy szeme', ['ismerem'])\n            .falseAnswer('Jó nagy pofája')\n            .falseAnswer('Kis csinos alakja')\n            .falseAnswer('Sok köcsög haverja')\n    )\n    .questionWithImg(\n        'Mi legyen Füzesabonyban?',\n        '/res/ismerem-6.jpg',\n        ans => ans\n            .correctAnswer('Tánc', ['ismerem'])\n            .falseAnswer('Ócsóság')\n            .falseAnswer('Infláció a rendszerben')\n            .falseAnswer('A bűnösök szenvedjenek')\n    )\n    .questionWithImg(\n        'Miért kapott pofont Jenő a Mónika Showban?',\n        '/res/ismerem-7.jpg',\n        ans => ans\n            .correctAnswer('Mert nem az őszintét mondta', ['ismerem'])\n            .falseAnswer('Mert alkoholista')\n            .falseAnswer('Mert kettőőő')\n            .falseAnswer('Mert felment zabálni')\n    )\n    .info(\n        '**Harmadik szint**: Hogy is volt ez?',\n        'Folytatás'\n    )\n    .questionWithImg(\n        'Mikor nyugszik meg Erzsike?',\n        '/res/hogyvolt-1.jpg',\n        ans => ans\n            .correctAnswer('Amikor a lábai előtt hever az a cseléd', ['hogyvolt'])\n            .falseAnswer('Amikor elhiszik róla, hogy nem szolgalelkű fehérnép')\n            .falseAnswer('Amikor Leó újra szeretni fogja')\n            .falseAnswer('Amikor kihívhatja Leó új barátnőjét iszapbirkózásra')\n    )\n    .questionWithImg(\n        'Honnan származik Erzsi?',\n        '/res/hogyvolt-2.jpg',\n        ans => ans\n            .correctAnswer('Az Írisz bolygóról', ['hogyvolt'])\n            .falseAnswer('A szomszíd falubul')\n            .falseAnswer('Nem mondhatta el')\n            .falseAnswer('Ő sem tudja, lehozták')\n    )\n    .cards;\n\nconst tagNames = {\n    konnyu: 'Alapműveltség',\n    ismerem: 'Ezeket ismerem',\n    kep: 'Ki van a képen?',\n    alapismeret: 'Alapismeretek',\n    hogyvolt: 'Hogy is volt ez?'\n};\n\nexport function getAppData(): AppData {\n    return {\n        cards,\n        ids: Object.keys(cards).map(key => parseInt(key, 10)),\n        tagNames,\n    };\n}\n","export function shuffleArray<T>(arr: T[]): T[] {\n    const clone = [...arr];\n\n    for (let i = clone.length - 1; i > 0; i--) {\n        const randomIndex = Math.floor(Math.random() * (i + 1));\n\n        [clone[i], clone[randomIndex]] = [clone[randomIndex], clone[i]];\n    }\n\n    return clone;\n}\n","import React, { useRef } from 'react';\n\nimport { AnswerResult } from '../models/AnswerResult';\nimport { Typography } from '@material-ui/core';\nimport { getAppData } from '../data/AppCards';\nimport { Question } from '../models/Question';\n\nexport type ResultsProps = {\n    answers: AnswerResult[];\n};\n\nconst { tagNames, cards } = getAppData();\n\ntype TagResults = {\n    tag: string;\n    tagName: string;\n    maxPossibleValue: number;\n    value: number;\n};\ntype FinalResults = {\n    tagResults: TagResults[];\n    maxPossiblePoints: number;\n    points: number;\n};\n\nfunction calculateResults(answers: AnswerResult[]): FinalResults {\n    const tagResults: { [tag: string]: TagResults } = {};\n    const maxPossiblePoints = Object.values(cards).filter(card => card.type === 'Question').length;\n    let points = 0;\n\n    for (const { questionId, answerId } of answers) {\n        const question = cards[questionId] as Question;\n        const answer = question.answers.find(ans => ans.id === answerId);\n\n        if (!answer) {\n            throw new Error('An error occurred while processing the data');\n        }\n\n        // populate tagResults\n        const tags = question.answers.map(ans => ans.tags ?? []).flatMap(tag => tag);\n        for (const tag of tags) {\n            if (!tagResults[tag]) {\n                tagResults[tag] = {\n                    tag,\n                    tagName: tagNames[tag],\n                    maxPossibleValue: 0,\n                    value: 0,\n                } as TagResults;\n            }\n            tagResults[tag].maxPossibleValue += 1;\n        }\n\n        // increment value if the answer has a tag\n        if (answer.tags) {\n            answer.tags.forEach(tag => tagResults[tag].value += 1);\n        }\n\n        // check if the answer was correct\n        if (answer.isCorrect) {\n            points += 1;\n        }\n    }\n\n    return {\n        tagResults: Object.values(tagResults),\n        maxPossiblePoints,\n        points\n    };\n}\n\nexport function Results(props: ResultsProps) {\n    const { current: results } = useRef(calculateResults(props.answers));\n\n    return (\n        <>\n            <h2>Here are your results</h2>\n\n            <Typography variant=\"body1\">\n                Maximum available points: {results.maxPossiblePoints}\n\n                Your points: {results.points}\n            </Typography>\n\n            <h5>Your results per tags:</h5>\n            {results.tagResults.map(tagResult => (\n                <div key={tagResult.tag}>\n                    Tag: {tagResult.tagName}\n\n                    Maximum available points: {tagResult.maxPossibleValue}\n\n                    Your points: {tagResult.value}\n                </div>\n            ))}\n        </>\n    );\n}\n\n","import React, { useState } from 'react';\n\nimport { Container, AppBar, Toolbar, IconButton, Typography } from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport { CardsContainer } from './CardsContainer';\nimport { AnswerResult } from '../models/AnswerResult';\nimport { getAppData } from '../data/AppCards';\nimport { Results } from './Results';\n\nconst { ids, cards } = getAppData();\n\nexport function App() {\n    const [isFinished, setIsFinished] = useState(false);\n    const [answers, setAnswers] = useState<AnswerResult[]>([]);\n\n    const onFinished = (answers: AnswerResult[]) => {\n        setIsFinished(true);\n        setAnswers(answers);\n    }\n\n    return (\n        <>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Old fost quiz\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container>\n                { !isFinished &&\n                    <CardsContainer\n                        cards={cards}\n                        cardIds={ids}\n                        onFinished={onFinished} />\n                }\n                { isFinished &&\n                    <Results answers={answers} />\n                }\n            </Container>\n        </>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}